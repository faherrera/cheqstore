@model CheqStore.Models.Product

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/Layouts/Admin/AdminLayout.cshtml";
    string image = (string.IsNullOrEmpty(Model.PathPhoto)) ? "http://www.bitaccora.com/images/portal/web/imagenblanco.jpg" : "/Uploads/" + @Model.PathPhoto;
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "ProductsAdmin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ProductID)


        <div id="preview">
            <img src=@image class="materialboxed" style="margin: 0 auto;" id="PathPhoto" />
        </div>
        <div class="file-field input-field">
            <div class="btn blue accent-3">
                <span>Cambiar Imagen</span>
                <input id="fileProductEdit" type="file" name="file">
            </div>
            <div class="file-path-wrapper">
                <input class="file-path validate" type="text">
            </div>
            @Html.ValidationMessageFor(model => model.PathPhoto, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="input-field">
            <select name="CategoryID">
                <option value="@Model.CategoryID" selected> @Model.Category.Name</option>
                @foreach (var item in ViewBag.CategoryID)
                {
                    if (item.CategoryID != Model.CategoryID)
                    {
                        <option value="@item.CategoryID">@item.Name</option>
                    }

                }

            </select>
            <label>Seleccionar Categoria</label>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts{

    <script src="~/Assets/js/Product/ProductBase.js"></script>
}